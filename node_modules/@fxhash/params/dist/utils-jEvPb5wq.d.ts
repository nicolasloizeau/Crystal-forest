type FxParamType = "number" | "bigint" | "boolean" | "color" | "string" | "bytes" | "select";
type FxParamOptionsMap = {
    [Type in FxParamType]: {
        number: {
            min?: number;
            max?: number;
            step?: number;
        };
        bigint: {
            min?: number | bigint;
            max?: number | bigint;
        };
        boolean: undefined;
        color: undefined;
        string: {
            minLength?: number;
            maxLength?: number;
        };
        bytes: {
            length: number;
        };
        select: {
            options: string[];
        };
    }[Type];
};
type FxParamTypeMap = {
    [Type in FxParamType]: {
        number: number;
        bigint: bigint;
        boolean: boolean;
        color: string;
        string: string;
        bytes: Uint8Array;
        select: string;
    }[Type];
};
type FxParamTransformationTypeMap = {
    [Type in FxParamType]: {
        number: number;
        bigint: bigint;
        boolean: boolean;
        color: {
            hex: {
                rgb: string;
                rgba: string;
            };
            obj: {
                rgb: {
                    r: number;
                    g: number;
                    b: number;
                };
                rgba: {
                    r: number;
                    g: number;
                    b: number;
                    a: number;
                };
            };
            arr: {
                rgb: [number, number, number];
                rgba: [number, number, number, number];
            };
        };
        string: string;
        bytes: Uint8Array;
        select: string;
    }[Type];
};
type FxParamUpdateMode = "page-reload" | "sync" | "code-driven";
type FxParamValue<Type extends FxParamType> = FxParamTypeMap[Type];
interface FxParamDefinition<Type extends FxParamType> {
    id: string;
    name?: string;
    type: Type;
    update?: FxParamUpdateMode;
    default: FxParamTypeMap[Type];
    value: FxParamTypeMap[Type];
    options: FxParamOptionsMap[Type];
    version?: string;
}
type FxParamDefinitions = FxParamDefinition<FxParamType>[];
type hexString = `#${string}`;
type FxParamProcessorTransformer<Type extends FxParamType> = (value: FxParamTypeMap[Type], definition?: FxParamDefinition<Type>) => FxParamTransformationTypeMap[Type];
type FxParamProcessorConstrainer<Type extends FxParamType> = (value: FxParamTypeMap[Type], definition: FxParamDefinition<Type>) => FxParamTypeMap[Type];
interface FxParamProcessor<Type extends FxParamType> {
    serialize: (input: FxParamTypeMap[Type], definition: FxParamDefinition<Type>) => string;
    deserialize: (input: string, definition: FxParamDefinition<Type>) => FxParamTypeMap[Type];
    bytesLength: (definition: FxParamDefinition<Type>) => number;
    transform?: FxParamProcessorTransformer<Type>;
    constrain?: FxParamProcessorConstrainer<Type>;
    random: (definition: FxParamDefinition<Type>) => FxParamTypeMap[Type];
}
type FxParamProcessors = {
    [T in FxParamType]: FxParamProcessor<T>;
};
type FxParamTranformType = "transform" | "constrain";
type FxParamsData = Record<string, any>;
type FxParamsRaw = Record<string, FxParamValue<FxParamType>>;
type FxParamTransformation = FxParamTransformationTypeMap[FxParamType];
type FxParamsTransformed = Record<string, FxParamTransformation>;

declare function rgbaToHex(r: number, g: number, b: number, a: number): string;
declare function hexToRgba(hexCode: hexString): {
    r: number;
    g: number;
    b: number;
    a: number;
};
declare const MIN_SAFE_INT64: bigint;
declare const MAX_SAFE_INT64: bigint;
declare const ParameterProcessors: FxParamProcessors;
declare function serializeParams(params: any, definition: FxParamDefinition<any>[]): string;
declare function serializeParamsOrNull(params: FxParamsData, definition: FxParamDefinition<any>[]): string | null;
declare function deserializeParams(bytes: string, definition: FxParamDefinition<FxParamType>[], options: {
    withTransform?: boolean;
    transformType?: FxParamTranformType;
}): FxParamsRaw | FxParamsTransformed;
declare function consolidateParams(params: any, data: any): any[];
/**
 * Given a definition and some params data, builds a clean params object where
 * the values are first found in the data object, then in the definition if a
 * default value exists, otherwise in randomizes the value using the param
 * associated processor.
 *
 * @param definition an array of parameter definition
 * @param data the params data used to reconstruct the final values
 */
declare function buildParamsObject(definition: FxParamDefinitions, data: FxParamsData | null): FxParamsData;
declare function getRandomParamValues(params: FxParamDefinition<FxParamType>[], options?: {
    noTransform?: boolean;
    randomizeAll?: boolean;
}): any;
declare function sumBytesParams(definitions: FxParamDefinition<FxParamType>[]): number;
declare function stringifyParamsData(data: FxParamsData): string;
declare function jsonStringifyBigint(data: any): string;
declare const processParam: (paramId: string, value: FxParamValue<FxParamType>, definitions: FxParamDefinition<FxParamType>[], transformType: FxParamTranformType) => FxParamValue<FxParamType> | FxParamTransformation;
declare const processParams: (values: FxParamsData, definitions: FxParamDefinition<FxParamType>[], transformType: FxParamTranformType) => Record<string, FxParamValue<FxParamType>>;

export { type FxParamTranformType as A, type FxParamsData as B, type FxParamsRaw as C, type FxParamTransformation as D, type FxParamsTransformed as E, type FxParamDefinition as F, MIN_SAFE_INT64 as M, ParameterProcessors as P, type FxParamType as a, MAX_SAFE_INT64 as b, serializeParamsOrNull as c, deserializeParams as d, consolidateParams as e, buildParamsObject as f, getRandomParamValues as g, hexToRgba as h, sumBytesParams as i, stringifyParamsData as j, jsonStringifyBigint as k, processParams as l, type FxParamOptionsMap as m, type FxParamTypeMap as n, type FxParamTransformationTypeMap as o, processParam as p, type FxParamUpdateMode as q, rgbaToHex as r, serializeParams as s, type FxParamValue as t, type FxParamDefinitions as u, type hexString as v, type FxParamProcessorTransformer as w, type FxParamProcessorConstrainer as x, type FxParamProcessor as y, type FxParamProcessors as z };
