{"version":3,"sources":["../src/validation.ts"],"names":[],"mappings":";;;AAGA,IAAM,oBAAA,GAAuB,EAAE,IAAK,CAAA;AAAA,EAClC,QAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,QAAA;AAAA,EACA,OAAA;AAAA,EACA,SAAA;AAAA,EACA;AACF,CAAC,CAAA;AAED,IAAM,2BAAA,GAA8B,EAAE,MAAO,CAAA;AAAA,EAC3C,GAAA,EAAK,EAAE,MAAO,EAAA,CAAE,GAAG,CAAE,CAAA,MAAA,EAAQ,CAAA,CAAE,QAAS,EAAA;AAAA,EACxC,GAAA,EAAK,EAAE,MAAO,EAAA,CAAE,GAAG,CAAE,CAAA,MAAA,EAAQ,CAAA,CAAE,QAAS;AAC1C,CAAC,CAAA;AAED,IAAM,2BAAA,GAA8B,EAAE,MAAO,CAAA;AAAA,EAC3C,GAAA,EAAK,EAAE,MAAO,EAAA,CAAE,IAAI,MAAO,CAAA,gBAAgB,EAAE,QAAS,EAAA;AAAA,EACtD,GAAA,EAAK,EAAE,MAAO,EAAA,CAAE,IAAI,MAAO,CAAA,gBAAgB,EAAE,QAAS,EAAA;AAAA,EACtD,IAAM,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS;AAC5B,CAAC,CAAA;AAED,IAAM,2BAAA,GAA8B,EAAE,MAAO,CAAA;AAAA,EAC3C,WAAW,CAAE,CAAA,MAAA,GAAS,GAAI,CAAA,CAAC,EAAE,QAAS,EAAA;AAAA,EACtC,SAAW,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS;AACjC,CAAC,CAAA;AAED,IAAM,0BAAA,GAA6B,EAAE,MAAO,CAAA;AAAA,EAC1C,MAAQ,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,GAAG,CAAC;AACzB,CAAC,CAAA;AAED,IAAM,2BAAA,GAA8B,EAAE,MAAO,CAAA;AAAA,EAC3C,SAAS,CAAE,CAAA,MAAA,EAAS,CAAA,KAAA,GAAQ,QAAS;AACvC,CAAC,CAAA;AAEY,IAAA,8BAAA,GAAiC,EAAE,MAAO,CAAA;AAAA,EACrD,EAAA,EAAI,EAAE,MAAO,EAAA;AAAA,EACb,IAAM,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EAC1B,gBAAkB,EAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAS;AACzC,CAAC;AAED,IAAM,sBAAA,GAAyB,+BAA+B,MAAO,CAAA;AAAA,EACnE,IAAM,EAAA,CAAA,CAAE,OAAQ,CAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA;AAAA,EAChD,OAAA,EAAS,4BAA4B,QAAS,EAAA;AAAA,EAC9C,OAAS,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS;AAC/B,CAAC,CAAA;AAED,IAAM,qBAAA,GAAwB,+BAA+B,MAAO,CAAA;AAAA,EAClE,IAAM,EAAA,CAAA,CAAE,OAAQ,CAAA,oBAAA,CAAqB,KAAK,KAAK,CAAA;AAAA,EAC/C,OAAS,EAAA,0BAAA;AAAA,EACT,OAAS,EAAA,CAAA,CAAE,GAAI,EAAA,CAAE,QAAS,EAAA;AAAA,EAC1B,MAAA,EAAQ,CAAE,CAAA,OAAA,CAAQ,aAAe,EAAA;AAAA,IAC/B,kBAAoB,EAAA,sCAAA;AAAA,IACpB,cAAgB,EAAA;AAAA,GACjB;AACH,CAAC,CAAA;AAED,IAAM,sBAAA,GAAyB,+BAA+B,MAAO,CAAA;AAAA,EACnE,IAAM,EAAA,CAAA,CAAE,OAAQ,CAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA;AAAA,EAChD,OAAA,EAAS,4BAA4B,QAAS,EAAA;AAAA,EAC9C,OAAS,EAAA,CAAA,CACN,MAAO,EAAA,CACP,GAAI,CAAA,MAAA,CAAO,gBAAgB,CAAA,CAC3B,GAAI,CAAA,MAAA,CAAO,gBAAgB,CAAA,CAC3B,QAAS;AACd,CAAC,CAAA;AAED,IAAM,sBAAA,GAAyB,+BAA+B,MAAO,CAAA;AAAA,EACnE,IAAM,EAAA,CAAA,CAAE,OAAQ,CAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA;AAAA,EAChD,OAAA,EAAS,4BAA4B,QAAS,EAAA;AAAA,EAC9C,OAAS,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS;AAC/B,CAAC,CAAA;AAED,IAAM,sBAAA,GAAyB,+BAA+B,MAAO,CAAA;AAAA,EACnE,IAAM,EAAA,CAAA,CAAE,OAAQ,CAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA;AAAA,EAChD,OAAS,EAAA,2BAAA;AAAA,EACT,OAAS,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS;AAC/B,CAAC,CAAA;AAED,IAAM,uBAAA,GAA0B,+BAA+B,MAAO,CAAA;AAAA,EACpE,IAAM,EAAA,CAAA,CAAE,OAAQ,CAAA,oBAAA,CAAqB,KAAK,OAAO,CAAA;AAAA,EACjD,OAAA,EAAS,EAAE,SAAU,EAAA;AAAA,EACrB,OAAS,EAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAS;AAChC,CAAC,CAAA;AAED,IAAM,qBAAA,GAAwB,+BAA+B,MAAO,CAAA;AAAA,EAClE,IAAM,EAAA,CAAA,CAAE,OAAQ,CAAA,oBAAA,CAAqB,KAAK,KAAK,CAAA;AAAA,EAC/C,OAAA,EAAS,EAAE,SAAU,EAAA;AAAA,EACrB,OAAS,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS;AAC/B,CAAC,CAAA;AAEkC,EAAE,KAAM,CAAA;AAAA,EACzC,sBAAA;AAAA,EACA,sBAAA;AAAA,EACA,sBAAA;AAAA,EACA,sBAAA;AAAA,EACA,qBAAA;AAAA,EACA,uBAAA;AAAA,EACA;AACF,CAAC;AAMD,IAAM,gBAAmB,GAAA;AAAA,EACvB,MAAQ,EAAA,sBAAA;AAAA,EACR,MAAQ,EAAA,sBAAA;AAAA,EACR,KAAO,EAAA,qBAAA;AAAA,EACP,MAAQ,EAAA,sBAAA;AAAA,EACR,KAAO,EAAA,qBAAA;AAAA,EACP,OAAS,EAAA,uBAAA;AAAA,EACT,MAAQ,EAAA;AACV,CAAA;AAEO,SAAS,4BACd,mBAIY,EAAA;AACZ,EAAO,OAAA,gBAAA,CAAiB,mBAAoB,CAAA,IAAI,CAAG,EAAA,SAAA;AAAA,IACjD;AAAA,GACF;AACF","file":"index.js","sourcesContent":["import { SafeParseError, SafeParseSuccess, z } from \"zod\"\nimport { FxParamDefinition, FxParamType } from \"./types\"\n\nconst ControllerTypeSchema = z.enum([\n  \"number\",\n  \"bigint\",\n  \"color\",\n  \"string\",\n  \"bytes\",\n  \"boolean\",\n  \"select\",\n])\n\nconst FxParamOptions_bigintSchema = z.object({\n  min: z.number().or(z.bigint()).optional(),\n  max: z.number().or(z.bigint()).optional(),\n})\n\nconst FxParamOptions_numberSchema = z.object({\n  min: z.number().gte(Number.MIN_SAFE_INTEGER).optional(),\n  max: z.number().lte(Number.MAX_SAFE_INTEGER).optional(),\n  step: z.number().optional(),\n})\n\nconst FxParamOptions_stringSchema = z.object({\n  minLength: z.number().gte(0).optional(),\n  maxLength: z.number().optional(),\n})\n\nconst FxParamOptions_bytesSchema = z.object({\n  length: z.number().gt(0),\n})\n\nconst FxParamOptions_selectSchema = z.object({\n  options: z.string().array().nonempty(),\n})\n\nexport const BaseControllerDefinitionSchema = z.object({\n  id: z.string(),\n  name: z.string().optional(),\n  exposedAsFeature: z.boolean().optional(),\n})\n\nconst StringControllerSchema = BaseControllerDefinitionSchema.extend({\n  type: z.literal(ControllerTypeSchema.enum.string),\n  options: FxParamOptions_stringSchema.optional(),\n  default: z.string().optional(),\n})\n\nconst BytesControllerSchema = BaseControllerDefinitionSchema.extend({\n  type: z.literal(ControllerTypeSchema.enum.bytes),\n  options: FxParamOptions_bytesSchema,\n  default: z.any().optional(),\n  update: z.literal(\"code-driven\", {\n    invalid_type_error: \"Bytes parameters must be code-driven\",\n    required_error: \"Bytes parameters must be code-driven\",\n  }),\n})\n\nconst NumberControllerSchema = BaseControllerDefinitionSchema.extend({\n  type: z.literal(ControllerTypeSchema.enum.number),\n  options: FxParamOptions_numberSchema.optional(),\n  default: z\n    .number()\n    .gte(Number.MIN_SAFE_INTEGER)\n    .lte(Number.MAX_SAFE_INTEGER)\n    .optional(),\n})\n\nconst BigIntControllerSchema = BaseControllerDefinitionSchema.extend({\n  type: z.literal(ControllerTypeSchema.enum.bigint),\n  options: FxParamOptions_bigintSchema.optional(),\n  default: z.bigint().optional(),\n})\n\nconst SelectControllerSchema = BaseControllerDefinitionSchema.extend({\n  type: z.literal(ControllerTypeSchema.enum.select),\n  options: FxParamOptions_selectSchema,\n  default: z.string().optional(),\n})\n\nconst BooleanControllerSchema = BaseControllerDefinitionSchema.extend({\n  type: z.literal(ControllerTypeSchema.enum.boolean),\n  options: z.undefined(),\n  default: z.boolean().optional(),\n})\n\nconst ColorControllerSchema = BaseControllerDefinitionSchema.extend({\n  type: z.literal(ControllerTypeSchema.enum.color),\n  options: z.undefined(),\n  default: z.string().optional(),\n})\n\nconst ControllerDefinitionSchema = z.union([\n  StringControllerSchema,\n  NumberControllerSchema,\n  BigIntControllerSchema,\n  SelectControllerSchema,\n  BytesControllerSchema,\n  BooleanControllerSchema,\n  ColorControllerSchema,\n])\n\nexport type ControllerDefinitionSchemaType = z.infer<\n  typeof ControllerDefinitionSchema\n>\n\nconst controllerSchema = {\n  number: NumberControllerSchema,\n  bigint: BigIntControllerSchema,\n  color: ColorControllerSchema,\n  string: StringControllerSchema,\n  bytes: BytesControllerSchema,\n  boolean: BooleanControllerSchema,\n  select: SelectControllerSchema,\n}\n\nexport function validateParameterDefinition(\n  parameterDefinition: FxParamDefinition<FxParamType>\n):\n  | SafeParseError<ControllerDefinitionSchemaType>\n  | SafeParseSuccess<ControllerDefinitionSchemaType>\n  | undefined {\n  return controllerSchema[parameterDefinition.type]?.safeParse(\n    parameterDefinition\n  )\n}\n"]}