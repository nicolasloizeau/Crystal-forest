export { MAX_SAFE_INT64, MIN_SAFE_INT64, ParameterProcessors, buildParamsObject, consolidateParams, deserializeParams, getRandomParamValues, hexToRgba, jsonStringifyBigint, processParam, processParams, rgbaToHex, serializeParams, serializeParamsOrNull, stringifyParamsData, sumBytesParams } from './chunk-B3N473DY.js';
import { z } from 'zod';

var ControllerTypeSchema = z.enum([
  "number",
  "bigint",
  "color",
  "string",
  "bytes",
  "boolean",
  "select"
]);
var FxParamOptions_bigintSchema = z.object({
  min: z.number().or(z.bigint()).optional(),
  max: z.number().or(z.bigint()).optional()
});
var FxParamOptions_numberSchema = z.object({
  min: z.number().gte(Number.MIN_SAFE_INTEGER).optional(),
  max: z.number().lte(Number.MAX_SAFE_INTEGER).optional(),
  step: z.number().optional()
});
var FxParamOptions_stringSchema = z.object({
  minLength: z.number().gte(0).optional(),
  maxLength: z.number().optional()
});
var FxParamOptions_bytesSchema = z.object({
  length: z.number().gt(0)
});
var FxParamOptions_selectSchema = z.object({
  options: z.string().array().nonempty()
});
var BaseControllerDefinitionSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  exposedAsFeature: z.boolean().optional()
});
var StringControllerSchema = BaseControllerDefinitionSchema.extend({
  type: z.literal(ControllerTypeSchema.enum.string),
  options: FxParamOptions_stringSchema.optional(),
  default: z.string().optional()
});
var BytesControllerSchema = BaseControllerDefinitionSchema.extend({
  type: z.literal(ControllerTypeSchema.enum.bytes),
  options: FxParamOptions_bytesSchema,
  default: z.any().optional(),
  update: z.literal("code-driven", {
    invalid_type_error: "Bytes parameters must be code-driven",
    required_error: "Bytes parameters must be code-driven"
  })
});
var NumberControllerSchema = BaseControllerDefinitionSchema.extend({
  type: z.literal(ControllerTypeSchema.enum.number),
  options: FxParamOptions_numberSchema.optional(),
  default: z.number().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).optional()
});
var BigIntControllerSchema = BaseControllerDefinitionSchema.extend({
  type: z.literal(ControllerTypeSchema.enum.bigint),
  options: FxParamOptions_bigintSchema.optional(),
  default: z.bigint().optional()
});
var SelectControllerSchema = BaseControllerDefinitionSchema.extend({
  type: z.literal(ControllerTypeSchema.enum.select),
  options: FxParamOptions_selectSchema,
  default: z.string().optional()
});
var BooleanControllerSchema = BaseControllerDefinitionSchema.extend({
  type: z.literal(ControllerTypeSchema.enum.boolean),
  options: z.undefined(),
  default: z.boolean().optional()
});
var ColorControllerSchema = BaseControllerDefinitionSchema.extend({
  type: z.literal(ControllerTypeSchema.enum.color),
  options: z.undefined(),
  default: z.string().optional()
});
z.union([
  StringControllerSchema,
  NumberControllerSchema,
  BigIntControllerSchema,
  SelectControllerSchema,
  BytesControllerSchema,
  BooleanControllerSchema,
  ColorControllerSchema
]);
var controllerSchema = {
  number: NumberControllerSchema,
  bigint: BigIntControllerSchema,
  color: ColorControllerSchema,
  string: StringControllerSchema,
  bytes: BytesControllerSchema,
  boolean: BooleanControllerSchema,
  select: SelectControllerSchema
};
function validateParameterDefinition(parameterDefinition) {
  return controllerSchema[parameterDefinition.type]?.safeParse(
    parameterDefinition
  );
}

export { BaseControllerDefinitionSchema, validateParameterDefinition };
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map