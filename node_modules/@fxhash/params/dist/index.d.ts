import { F as FxParamDefinition, a as FxParamType } from './utils-jEvPb5wq.js';
export { u as FxParamDefinitions, m as FxParamOptionsMap, y as FxParamProcessor, x as FxParamProcessorConstrainer, w as FxParamProcessorTransformer, z as FxParamProcessors, A as FxParamTranformType, D as FxParamTransformation, o as FxParamTransformationTypeMap, n as FxParamTypeMap, q as FxParamUpdateMode, t as FxParamValue, B as FxParamsData, C as FxParamsRaw, E as FxParamsTransformed, b as MAX_SAFE_INT64, M as MIN_SAFE_INT64, P as ParameterProcessors, f as buildParamsObject, e as consolidateParams, d as deserializeParams, g as getRandomParamValues, v as hexString, h as hexToRgba, k as jsonStringifyBigint, p as processParam, l as processParams, r as rgbaToHex, s as serializeParams, c as serializeParamsOrNull, j as stringifyParamsData, i as sumBytesParams } from './utils-jEvPb5wq.js';
import { z, SafeParseError, SafeParseSuccess } from 'zod';

declare const BaseControllerDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>;
declare const ControllerDefinitionSchema: z.ZodUnion<[z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
} & {
    type: z.ZodLiteral<"string">;
    options: z.ZodOptional<z.ZodObject<{
        minLength: z.ZodOptional<z.ZodNumber>;
        maxLength: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }, {
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }>>;
    default: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "string";
    default?: string | undefined;
    options?: {
        minLength?: number | undefined;
        maxLength?: number | undefined;
    } | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    type: "string";
    default?: string | undefined;
    options?: {
        minLength?: number | undefined;
        maxLength?: number | undefined;
    } | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
} & {
    type: z.ZodLiteral<"number">;
    options: z.ZodOptional<z.ZodObject<{
        min: z.ZodOptional<z.ZodNumber>;
        max: z.ZodOptional<z.ZodNumber>;
        step: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    }, {
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    }>>;
    default: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "number";
    default?: number | undefined;
    options?: {
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    } | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    type: "number";
    default?: number | undefined;
    options?: {
        min?: number | undefined;
        max?: number | undefined;
        step?: number | undefined;
    } | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
} & {
    type: z.ZodLiteral<"bigint">;
    options: z.ZodOptional<z.ZodObject<{
        min: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodBigInt]>>;
        max: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodBigInt]>>;
    }, "strip", z.ZodTypeAny, {
        min?: number | bigint | undefined;
        max?: number | bigint | undefined;
    }, {
        min?: number | bigint | undefined;
        max?: number | bigint | undefined;
    }>>;
    default: z.ZodOptional<z.ZodBigInt>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "bigint";
    default?: bigint | undefined;
    options?: {
        min?: number | bigint | undefined;
        max?: number | bigint | undefined;
    } | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    type: "bigint";
    default?: bigint | undefined;
    options?: {
        min?: number | bigint | undefined;
        max?: number | bigint | undefined;
    } | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
} & {
    type: z.ZodLiteral<"select">;
    options: z.ZodObject<{
        options: z.ZodArray<z.ZodString, "atleastone">;
    }, "strip", z.ZodTypeAny, {
        options: [string, ...string[]];
    }, {
        options: [string, ...string[]];
    }>;
    default: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "select";
    options: {
        options: [string, ...string[]];
    };
    default?: string | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    type: "select";
    options: {
        options: [string, ...string[]];
    };
    default?: string | undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
} & {
    type: z.ZodLiteral<"bytes">;
    options: z.ZodObject<{
        length: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        length: number;
    }, {
        length: number;
    }>;
    default: z.ZodOptional<z.ZodAny>;
    update: z.ZodLiteral<"code-driven">;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "bytes";
    options: {
        length: number;
    };
    update: "code-driven";
    default?: any;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    type: "bytes";
    options: {
        length: number;
    };
    update: "code-driven";
    default?: any;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
} & {
    type: z.ZodLiteral<"boolean">;
    options: z.ZodUndefined;
    default: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "boolean";
    default?: boolean | undefined;
    options?: undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    type: "boolean";
    default?: boolean | undefined;
    options?: undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    exposedAsFeature: z.ZodOptional<z.ZodBoolean>;
} & {
    type: z.ZodLiteral<"color">;
    options: z.ZodUndefined;
    default: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "color";
    default?: string | undefined;
    options?: undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}, {
    id: string;
    type: "color";
    default?: string | undefined;
    options?: undefined;
    name?: string | undefined;
    exposedAsFeature?: boolean | undefined;
}>]>;
type ControllerDefinitionSchemaType = z.infer<typeof ControllerDefinitionSchema>;
declare function validateParameterDefinition(parameterDefinition: FxParamDefinition<FxParamType>): SafeParseError<ControllerDefinitionSchemaType> | SafeParseSuccess<ControllerDefinitionSchemaType> | undefined;

export { BaseControllerDefinitionSchema, type ControllerDefinitionSchemaType, FxParamDefinition, FxParamType, validateParameterDefinition };
