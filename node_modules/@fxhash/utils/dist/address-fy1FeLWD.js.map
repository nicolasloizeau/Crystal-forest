{"version":3,"file":"address-fy1FeLWD.js","names":["mockBaseAddress: () => string","chain: Blockchain","address: string","isBaseAddressValid: (address: string) => boolean"],"sources":["../src/address.ts"],"sourcesContent":["import { BASE58_CHARSET } from \"./constants\"\n\n// todo: should maybe merge @fxhash/utils & @fxhash/shared ?\n// or move this into shared ? as it's sort of blockchain-related\ntype Blockchain = \"ETHEREUM\" | \"BASE\" | \"TEZOS\"\n\nexport function mockEthereumAddress(): string {\n  const randomBytes = Array.from(\n    { length: 20 },\n    () => (Math.random() * 256) | 0\n  )\n  const hexString = Array.from(randomBytes)\n    .map(byte => byte.toString(16).padStart(2, \"0\"))\n    .join(\"\")\n  return `0x${hexString}`\n}\n\nexport const mockBaseAddress: () => string = mockEthereumAddress\n\nexport function mockTezosAddress() {\n  const randomSequence = Array.from(\n    { length: 33 },\n    () => BASE58_CHARSET[(Math.random() * BASE58_CHARSET.length) | 0]\n  ).join(\"\")\n  return `tz1${randomSequence}`\n}\n\nexport function mockBlockchainAddress(chain: Blockchain): string {\n  if ([\"ETHEREUM\", \"BASE\"].includes(chain)) return mockEthereumAddress()\n  return mockTezosAddress()\n}\n\nexport function isTezosAddressValid(address: string): boolean {\n  if (address.length !== 36) {\n    return false\n  }\n  if (!/^(tz|KT)[1-4]/.test(address)) {\n    return false\n  }\n  for (let i = 0; i < address.length; i++) {\n    if (!BASE58_CHARSET.includes(address[i])) return false\n  }\n  return true\n}\n\nexport function isEthereumAddressValid(address: string): boolean {\n  return /^(0x)?[0-9a-fA-F]{40}$/.test(address)\n}\n\nexport const isBaseAddressValid: (address: string) => boolean =\n  isEthereumAddressValid\n\nexport function getBlockchainFromAddress(address: string): Blockchain {\n  if (isEthereumAddressValid(address)) return \"ETHEREUM\"\n  if (isTezosAddressValid(address)) return \"TEZOS\"\n  throw new Error(\n    \"The provided address is not a valid tezos or ethereum address\"\n  )\n}\n\nexport function isBlockchainAddressValid(address: string): boolean {\n  return [isTezosAddressValid, isEthereumAddressValid, isBaseAddressValid].some(\n    validation => validation(address)\n  )\n}\n"],"mappings":";;;AAMA,SAAgB,sBAA8B;CAC5C,MAAM,cAAc,MAAM,KACxB,EAAE,QAAQ,GAAI,GACd,MAAO,KAAK,QAAQ,GAAG,MAAO,EAC/B;CACD,MAAM,YAAY,MAAM,KAAK,YAAY,CACtC,IAAI,UAAQ,KAAK,SAAS,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,CAC/C,KAAK,GAAG;AACX,SAAQ,IAAI,UAAU;AACvB;AAED,MAAaA,kBAAgC;AAE7C,SAAgB,mBAAmB;CACjC,MAAM,iBAAiB,MAAM,KAC3B,EAAE,QAAQ,GAAI,GACd,MAAM,eAAgB,KAAK,QAAQ,GAAG,eAAe,SAAU,GAChE,CAAC,KAAK,GAAG;AACV,SAAQ,KAAK,eAAe;AAC7B;AAED,SAAgB,sBAAsBC,OAA2B;AAC/D,KAAI,CAAC,YAAY,MAAO,EAAC,SAAS,MAAM,CAAE,QAAO,qBAAqB;AACtE,QAAO,kBAAkB;AAC1B;AAED,SAAgB,oBAAoBC,SAA0B;AAC5D,KAAI,QAAQ,WAAW,GACrB,QAAO;AAET,MAAK,gBAAgB,KAAK,QAAQ,CAChC,QAAO;AAET,MAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAClC,MAAK,eAAe,SAAS,QAAQ,GAAG,CAAE,QAAO;AAEnD,QAAO;AACR;AAED,SAAgB,uBAAuBA,SAA0B;AAC/D,QAAO,yBAAyB,KAAK,QAAQ;AAC9C;AAED,MAAaC,qBACX;AAEF,SAAgB,yBAAyBD,SAA6B;AACpE,KAAI,uBAAuB,QAAQ,CAAE,QAAO;AAC5C,KAAI,oBAAoB,QAAQ,CAAE,QAAO;AACzC,OAAM,IAAI,MACR;AAEH;AAED,SAAgB,yBAAyBA,SAA0B;AACjE,QAAO;EAAC;EAAqB;EAAwB;CAAmB,EAAC,KACvE,gBAAc,WAAW,QAAQ,CAClC;AACF"}