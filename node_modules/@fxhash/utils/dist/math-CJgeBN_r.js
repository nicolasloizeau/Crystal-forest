import { BASE58_CHARSET } from "./constants-preV6l4A.js";
import { isEthereumAddressValid, isTezosAddressValid } from "./address-fy1FeLWD.js";
import { isEthereumTransactionHashValid } from "./hash-DpgZuvgv.js";

//#region src/math.ts
function getRandomHash(n) {
	return Array(n).fill(0).map(function(_) {
		return BASE58_CHARSET[Math.random() * BASE58_CHARSET.length | 0];
	}).join("");
}
function b58dec(str) {
	return [...str].reduce(function(p, c) {
		return p * BASE58_CHARSET.length + BASE58_CHARSET.indexOf(c) | 0;
	}, 0);
}
function sfc32([a, b, c, d]) {
	return function() {
		a |= 0;
		b |= 0;
		c |= 0;
		d |= 0;
		const t = (a + b | 0) + d | 0;
		d = d + 1 | 0;
		a = b ^ b >>> 9;
		b = c + (c << 3) | 0;
		c = c << 21 | c >>> 11;
		c = c + t | 0;
		return (t >>> 0) / 4294967296;
	};
}
function matcher(str, start, decoder = b58dec) {
	const matches = str.slice(start).match(new RegExp(".{" + (str.length - start >> 2) + "}", "g"));
	return matches ? matches.map(decoder) : [];
}
function getSeedFromHash(hash) {
	if (isEthereumTransactionHashValid(hash) || isEthereumAddressValid(hash)) return matcher(hash, 2, (s) => Number(BigInt(`0x${s}`) % BigInt(4294967295)));
	else if (isTezosAddressValid(hash)) return matcher(hash, 3);
	else return matcher(hash, 2);
}
function createFxRandom(hash) {
	const seed = getSeedFromHash(hash);
	return sfc32(seed);
}

//#endregion
export { createFxRandom, getRandomHash };
//# sourceMappingURL=math-CJgeBN_r.js.map