{"version":3,"file":"hash-DpgZuvgv.js","names":["mockBaseTransactionHash: () => string","chain: Blockchain","hash: string","isBaseTransactionHashValid: (hash: string) => boolean","address: string"],"sources":["../src/hash.ts"],"sourcesContent":["import { BASE58_CHARSET } from \"./constants\"\n\n// todo: should maybe merge @fxhash/utils & @fxhash/shared ?\n// or move this into shared ? as it's sort of blockchain-related\ntype Blockchain = \"ETHEREUM\" | \"BASE\" | \"TEZOS\"\n\n/**\n * Generates a mock Tezos transaction hash.\n * @returns {string} The mock Tezos transaction hash.\n */\nexport function mockTezosTransactionHash(): string {\n  const randomSequence = Array.from(\n    { length: 49 },\n    () => BASE58_CHARSET[(Math.random() * BASE58_CHARSET.length) | 0]\n  ).join(\"\")\n  return `oo${randomSequence}`\n}\n\n/**\n * Generates a mock Ethereum transaction hash.\n * @returns {string} The mock Ethereum transaction hash.\n */\nexport function mockEthereumTransactionHash(): string {\n  const randomBytes = Array.from(\n    { length: 32 },\n    () => (Math.random() * 256) | 0\n  )\n  const hexString = Array.from(randomBytes)\n    .map(byte => byte.toString(16).padStart(2, \"0\"))\n    .join(\"\")\n  return `0x${hexString}`\n}\n\n/**\n * Alias for mockEthereumTransactionHash function because base is eth l2.\n */\nexport const mockBaseTransactionHash: () => string = mockEthereumTransactionHash\n\n/**\n * Generates a mock transaction hash for a given blockchain.\n * @param {Blockchain} chain - The blockchain to generate the mock transaction hash for.\n * @returns {string} The mock transaction hash.\n */\nexport function mockTransactionHash(chain: Blockchain): string {\n  if ([\"ETHEREUM\", \"BASE\"].includes(chain)) return mockEthereumTransactionHash()\n  return mockTezosTransactionHash()\n}\n\n/**\n * Validates an Ethereum transaction hash.\n * @param {string} hash - The Ethereum transaction hash to validate.\n * @returns {boolean} True if the hash is valid, false otherwise.\n */\nexport function isEthereumTransactionHashValid(hash: string): boolean {\n  return /^(0x)?([A-Fa-f0-9]{64})$/.test(hash)\n}\n\n/**\n * Alias for isEthereumTransactionHashValid function because base is eth l2.\n */\nexport const isBaseTransactionHashValid: (hash: string) => boolean =\n  isEthereumTransactionHashValid\n\n/**\n * Validates a Tezos transaction hash.\n * @param {string} hash - The Tezos transaction hash to validate.\n * @returns {boolean} True if the hash is valid, false otherwise.\n */\nexport function isTezosTransactionHashValid(hash: string): boolean {\n  if (hash.length !== 51) {\n    return false\n  }\n  if (!hash.startsWith(\"oo\") && !hash.startsWith(\"op\")) {\n    return false\n  }\n  for (let i = 2; i < hash.length; i++) {\n    if (!BASE58_CHARSET.includes(hash[i])) return false\n  }\n  return true\n}\n\n/**\n * Determines the blockchain from a transaction hash.\n * @param {string} hash - The transaction hash.\n * @returns {Blockchain} The blockchain the transaction hash belongs to.\n */\nexport function getBlockchainFromTransactionHash(hash: string): Blockchain {\n  if (isEthereumTransactionHashValid(hash)) return \"ETHEREUM\"\n  if (isTezosTransactionHashValid(hash)) return \"TEZOS\"\n  throw new Error(\n    \"The provided value is not a valid tezos or ethereum transaction hash\"\n  )\n}\n/**\n * Validates a transaction hash.\n * @param {string} address - The transaction hash to validate.\n * @returns {boolean} True if the transaction hash is valid for any of the supported blockchains, false otherwise.\n */\nexport function isTransactionHashValid(address: string): boolean {\n  return [\n    isTezosTransactionHashValid,\n    isEthereumTransactionHashValid,\n    isBaseTransactionHashValid,\n  ].some(validation => validation(address))\n}\n"],"mappings":";;;;;;;AAUA,SAAgB,2BAAmC;CACjD,MAAM,iBAAiB,MAAM,KAC3B,EAAE,QAAQ,GAAI,GACd,MAAM,eAAgB,KAAK,QAAQ,GAAG,eAAe,SAAU,GAChE,CAAC,KAAK,GAAG;AACV,SAAQ,IAAI,eAAe;AAC5B;;;;;AAMD,SAAgB,8BAAsC;CACpD,MAAM,cAAc,MAAM,KACxB,EAAE,QAAQ,GAAI,GACd,MAAO,KAAK,QAAQ,GAAG,MAAO,EAC/B;CACD,MAAM,YAAY,MAAM,KAAK,YAAY,CACtC,IAAI,UAAQ,KAAK,SAAS,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,CAC/C,KAAK,GAAG;AACX,SAAQ,IAAI,UAAU;AACvB;;;;AAKD,MAAaA,0BAAwC;;;;;;AAOrD,SAAgB,oBAAoBC,OAA2B;AAC7D,KAAI,CAAC,YAAY,MAAO,EAAC,SAAS,MAAM,CAAE,QAAO,6BAA6B;AAC9E,QAAO,0BAA0B;AAClC;;;;;;AAOD,SAAgB,+BAA+BC,MAAuB;AACpE,QAAO,2BAA2B,KAAK,KAAK;AAC7C;;;;AAKD,MAAaC,6BACX;;;;;;AAOF,SAAgB,4BAA4BD,MAAuB;AACjE,KAAI,KAAK,WAAW,GAClB,QAAO;AAET,MAAK,KAAK,WAAW,KAAK,KAAK,KAAK,WAAW,KAAK,CAClD,QAAO;AAET,MAAK,IAAI,IAAI,GAAG,IAAI,KAAK,QAAQ,IAC/B,MAAK,eAAe,SAAS,KAAK,GAAG,CAAE,QAAO;AAEhD,QAAO;AACR;;;;;;AAOD,SAAgB,iCAAiCA,MAA0B;AACzE,KAAI,+BAA+B,KAAK,CAAE,QAAO;AACjD,KAAI,4BAA4B,KAAK,CAAE,QAAO;AAC9C,OAAM,IAAI,MACR;AAEH;;;;;;AAMD,SAAgB,uBAAuBE,SAA0B;AAC/D,QAAO;EACL;EACA;EACA;CACD,EAAC,KAAK,gBAAc,WAAW,QAAQ,CAAC;AAC1C"}