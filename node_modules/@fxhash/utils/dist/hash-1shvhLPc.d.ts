//#region src/hash.d.ts
type Blockchain = "ETHEREUM" | "BASE" | "TEZOS";
/**
 * Generates a mock Tezos transaction hash.
 * @returns {string} The mock Tezos transaction hash.
 */
declare function mockTezosTransactionHash(): string;
/**
 * Generates a mock Ethereum transaction hash.
 * @returns {string} The mock Ethereum transaction hash.
 */
declare function mockEthereumTransactionHash(): string;
/**
 * Alias for mockEthereumTransactionHash function because base is eth l2.
 */
declare const mockBaseTransactionHash: () => string;
/**
 * Generates a mock transaction hash for a given blockchain.
 * @param {Blockchain} chain - The blockchain to generate the mock transaction hash for.
 * @returns {string} The mock transaction hash.
 */
declare function mockTransactionHash(chain: Blockchain): string;
/**
 * Validates an Ethereum transaction hash.
 * @param {string} hash - The Ethereum transaction hash to validate.
 * @returns {boolean} True if the hash is valid, false otherwise.
 */
declare function isEthereumTransactionHashValid(hash: string): boolean;
/**
 * Alias for isEthereumTransactionHashValid function because base is eth l2.
 */
declare const isBaseTransactionHashValid: (hash: string) => boolean;
/**
 * Validates a Tezos transaction hash.
 * @param {string} hash - The Tezos transaction hash to validate.
 * @returns {boolean} True if the hash is valid, false otherwise.
 */
declare function isTezosTransactionHashValid(hash: string): boolean;
/**
 * Determines the blockchain from a transaction hash.
 * @param {string} hash - The transaction hash.
 * @returns {Blockchain} The blockchain the transaction hash belongs to.
 */
declare function getBlockchainFromTransactionHash(hash: string): Blockchain;
/**
 * Validates a transaction hash.
 * @param {string} address - The transaction hash to validate.
 * @returns {boolean} True if the transaction hash is valid for any of the supported blockchains, false otherwise.
 */
declare function isTransactionHashValid(address: string): boolean;
//#endregion
export { getBlockchainFromTransactionHash as getBlockchainFromTransactionHash$1, isBaseTransactionHashValid as isBaseTransactionHashValid$1, isEthereumTransactionHashValid as isEthereumTransactionHashValid$1, isTezosTransactionHashValid as isTezosTransactionHashValid$1, isTransactionHashValid as isTransactionHashValid$1, mockBaseTransactionHash as mockBaseTransactionHash$1, mockEthereumTransactionHash as mockEthereumTransactionHash$1, mockTezosTransactionHash as mockTezosTransactionHash$1, mockTransactionHash as mockTransactionHash$1 };
//# sourceMappingURL=hash-1shvhLPc.d.ts.map